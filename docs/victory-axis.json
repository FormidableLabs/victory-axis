{"description":"","props":{"animate":{"type":{"name":"object"},"required":false,"description":"The animate prop specifies props for victory-animation to use. It this prop is\nnot given, the axis will not tween between changing data / style props.\nLarge datasets might animate slowly due to the inherent limits of svg rendering.\n@examples {velocity: 0.02, onEnd: () => alert(\"done!\")}"},"crossAxis":{"type":{"name":"bool"},"required":false,"description":"This prop specifies whether a given axis is intended to cross another axis."},"dependentAxis":{"type":{"name":"bool"},"required":false,"description":"The dependentAxis prop specifies whether the axis corresponds to the\ndependent variable (usually y). This prop is useful when composing axis\nwith other components to form a chart."},"domain":{"type":{"name":"custom","raw":"VictoryPropTypes.minMaxArray"},"required":false,"description":"The domain prop describes the range of values your axis will include. This prop should be\ngiven as a array of the minimum and maximum expected values for your axis.\nIf this value is not given it will be calculated based on the scale or tickValues.\n@exampes [-1, 1]"},"height":{"type":{"name":"custom","raw":"VictoryPropTypes.nonNegative"},"required":false,"description":"The height props specifies the height of the chart container element in pixels","defaultValue":{"value":"300","computed":false}},"label":{"type":{"name":"string"},"required":false,"description":"The label prop specifies the label for your axis"},"labelPadding":{"type":{"name":"number"},"required":false,"description":"The labelPadding prop specifies the padding in pixels for you axis label"},"offsetX":{"type":{"name":"number"},"required":false,"description":"This value describes how far from the \"edge\" of it's permitted area each axis\nwill be set back in the x-direction.  If this prop is not given,\nthe offset is calculated based on font size, axis orientation, and label padding."},"offsetY":{"type":{"name":"number"},"required":false,"description":"This value describes how far from the \"edge\" of it's permitted area each axis\nwill be set back in the y-direction.  If this prop is not given,\nthe offset is calculated based on font size, axis orientation, and label padding."},"orientation":{"type":{"name":"enum","value":[{"value":"\"top\"","computed":false},{"value":"\"bottom\"","computed":false},{"value":"\"left\"","computed":false},{"value":"\"right\"","computed":false}]},"required":false,"description":"The orientation prop specifies the position and orientation of your axis."},"padding":{"type":{"name":"union","value":[{"name":"number"},{"name":"shape","value":{"top":{"name":"number","required":false},"bottom":{"name":"number","required":false},"left":{"name":"number","required":false},"right":{"name":"number","required":false}}}]},"required":false,"description":"The padding props specifies the amount of padding in number of pixels between\nthe edge of the chart and any rendered child components. This prop can be given\nas a number or as an object with padding specified for top, bottom, left\nand right.","defaultValue":{"value":"50","computed":false}},"scale":{"type":{"name":"custom","raw":"VictoryPropTypes.scale"},"required":false,"description":"The scale prop determines which scales your axis should use. This prop should be\ngiven as a function,\n@examples d3.time.scale()","defaultValue":{"value":"d3.scale.linear()","computed":true}},"standalone":{"type":{"name":"bool"},"required":false,"description":"The standalone prop determines whether the component will render a standalone svg\nor a <g> tag that will be included in an external svg. Set standalone to false to\ncompose VictoryAxis with other components within an enclosing <svg> tag.","defaultValue":{"value":"true","computed":false}},"style":{"type":{"name":"shape","value":{"parent":{"name":"object","required":false},"line":{"name":"object","required":false},"label":{"name":"object","required":false},"grid":{"name":"shape","value":{"parent":{"name":"object","required":false},"line":{"name":"object","required":false}},"required":false},"ticks":{"name":"shape","value":{"parent":{"name":"object","required":false},"line":{"name":"object","required":false},"label":{"name":"object","required":false}},"required":false}}},"required":false,"description":"The style prop specifies styles for your chart. Victory Axis relies on Radium,\nso valid Radium style objects should work for this prop, however height, width, and margin\nare used to calculate range, and need to be expressed as a number of pixels.\nstyles for axis lines, gridlines, and ticks are scoped to separate props.\n@examples {axis: {stroke: \"#756f6a\"}, grid: {stroke: \"grey\"}, ticks: {stroke: \"grey\"},\ntickLabels: {fontSize: 10, padding: 5}, axisLabels: {fontSize: 16, padding: 20}}"},"tickCount":{"type":{"name":"custom","raw":"VictoryPropTypes.nonNegative"},"required":false,"description":"The tickCount prop specifies how many ticks should be drawn on the axis if\nticksValues are not explicitly provided.","defaultValue":{"value":"5","computed":false}},"tickFormat":{"type":{"name":"union","value":[{"name":"func"},{"name":"custom","raw":"VictoryPropTypes.homogenousArray"}]},"required":false,"description":"The tickFormat prop specifies how tick values should be expressed visually.\ntickFormat can be given as a function to be applied to every tickValue, or as\nan array of display values for each tickValue\n@examples d3.time.format(\"%Y\"), (x) => x.toPrecision(2), [\"first\", \"second\", \"third\"]"},"tickValues":{"type":{"name":"custom","raw":"VictoryPropTypes.homogenousArray"},"required":false,"description":"The tickValues prop explicity specifies which ticks values to draw on the axis.\n@examples [\"apples\", \"bananas\", \"oranges\"], [2, 4, 6, 8]"},"width":{"type":{"name":"custom","raw":"VictoryPropTypes.nonNegative"},"required":false,"description":"The width props specifies the width of the chart container element in pixels","defaultValue":{"value":"450","computed":false}}}}